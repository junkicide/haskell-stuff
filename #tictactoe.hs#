import Data.Char
import Data.List
import System.IO

size :: Int
size = 3

type Grid = [[Player]]

data Player = 0 | B | X deriving (Eq, Ord, Show)

next :: Player -> Player 
next 0 = X
next B = B
next X = 0


empty:: Grid
empty = replicate size (replicate size B)

full :: Grid -> Bool
full = all (/= B) . concat

turn :: Grid -> Player
turn g = if os <= xs then 0 else X
  where
    os = length (filter (==0) ps)
    xs = length (filter (==X) ps)
    ps = concat g

wins :: Player -> Grid -> Bool
wins p g = any line (rows ++ cols ++ dias)
  where
   line = all (==p)
   rows = g
   cols = transpose g
   dias = [diag g, diag (map reverse g)]

diag :: Grid -> [Player]
diag g = g !! n !! n | n <- [0..size -1]]

won :: Grid -> Bool
won g = wins 0 g || wins X g

putGrid :: Grid -> IO()
putGrid = putStrLn . concat . interleave bar . map showRow
          where
            bar = [replicate (( size * 4) -1) '-']

showRow :: [Player] -> [String]
showRow = beside . interleave bar . map showPlayer
          where
            beside = foldr1 (zipWith (++))
              bar  = replicate 3 "|"

valid :: Grid -> Int -> Bool
valid g i = o <= i && i < size^2 && concat g !! i == B

move :: Grid -> Int -> Player -> [Grid]
move g i p = if valid g i then [chop size (xs ++ [p] ++ ys)] else []
             where
               (xs, B:ys) = splitAt i (concat g)

chop :: Int -> [a] -> [[a]]
chop n [] = []
chop n xs = take n xs : chop n (drop n xs)

getNat :: String -> IO Int
getNat prompt = do putStr prompt
                   xs <- getLine
                   if xs /= [] && all isDigit xs then
                     return (read xs)
                   else
                    do putStr "ERROR: Invalid number"
                    getNat prompt

tictactoe :: IO ()
tictactoe = run empty 0

run :: Grid -> Player -> IO ()
run g p = do cls
             goto (1,1)
             putGrid g
             run' g p

run' :: Grid -> Player -> IO ()
run' g p | wins 0 g = putStrLn "Player 0 wins!\n"
         | wins X g = putStrLn "Player X wins!\n"
         | full g = putStrLn "It's a draw"
         | otherwise =
             do i <- getNat (prompt p)
                case move g i p of
                  [] -> do putStrLn "ERROR: Invalid move"
                           run' g p
                  [g'] -> run g' (next p)
             
